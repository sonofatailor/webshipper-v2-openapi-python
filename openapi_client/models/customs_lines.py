# coding: utf-8

"""
    Webshipper V2 REST API

       <p>     The Webshipper API is a RESTful JSON API that gives full control over your Webshipper account. The API is scoped to your <em>account name</em>,     and is accessed via the endpoint <em>https://&lt;account name&gt;.api.webshipper.io/v2/</em>. Your <em>account name</em> is the same as you see when you access the Webshipper web UI     at <em>https://&lt;account name&gt;.webshipper.io</em>.   </p>    <p>     This API conforms to the <a href=\"http://jsonapi.org/\">JSON API standard</a> with the following conventions:     <ul>       <li>Resources are identified with the attribute <code>id</code>, which is a server-side generated sequential integer</li>       <li>Resource types are pluralised and underscored, like <code>order_lines</code></li>       <li>The API has a fixed page limit of 30 records. To fetch more records use the query parameter <code>page[number]</code></li>       <li>All resources have the attributes <code>created_at</code> and <code>updated_at</code> which are ISO 8601 timestamps like <code>2018-03-07T14:01:18.000Z</code> </li>       <li>All country codes are <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2</a> codes</li>     </ul>   </p>     <p> It is also possible to download the documentation in the OpenAPI 3.0 <a href=\"?download_openapi=1\">here</a> </p>    <div class=\"alert alert-info\">     <i class=\"fa fa-info mr-2\"></i>     Webshipper <em>strongly</em> recommends using a client library for utilising this API. Refer to jsonapi.org's list of     <a href=\"http://jsonapi.org/implementations/#client-libraries\">jsonapi.org's list of client libraries</a> to find one for your language.   </div> 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CustomsLines(BaseModel):
    """
    CustomsLines
    """ # noqa: E501
    sku: Optional[StrictStr] = Field(default=None, description="Stock Keeping Unit")
    description: Optional[StrictStr] = Field(default=None, description="Goods description")
    quantity: Optional[StrictInt] = Field(default=None, description="Quantity of the customs line")
    tarif_number: Optional[StrictStr] = Field(default=None, description="Tariff number / HS code")
    country_of_origin: Optional[StrictStr] = Field(default=None, description="Country of origin of the customs line - ISO 3166-1 alpha-2")
    unit_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Unit price of a single quantity customs line")
    vat_percent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Vat percent of the customs line")
    currency: Optional[StrictStr] = Field(default=None, description="Currency ISO-4217")
    weight: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Weight of a single quantity customs line")
    weight_unit: Optional[StrictInt] = Field(default=None, description="Weight unit of the customs line - One of 'g', 'oz', 'lbs' or 'kg'")
    discount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Discount of a single quantity customs line")
    dangerous_goods_details: Optional[Union[str, Any]] = Field(default=None, description="Optional object of key value pairs used for providing information of dangerous goods. For use with DGOffice, use keys: article_no, package_type_id and packaging_instruction_type.")
    __properties: ClassVar[List[str]] = ["sku", "description", "quantity", "tarif_number", "country_of_origin", "unit_price", "vat_percent", "currency", "weight", "weight_unit", "discount", "dangerous_goods_details"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CustomsLines from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CustomsLines from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sku": obj.get("sku"),
            "description": obj.get("description"),
            "quantity": obj.get("quantity"),
            "tarif_number": obj.get("tarif_number"),
            "country_of_origin": obj.get("country_of_origin"),
            "unit_price": obj.get("unit_price"),
            "vat_percent": obj.get("vat_percent"),
            "currency": obj.get("currency"),
            "weight": obj.get("weight"),
            "weight_unit": obj.get("weight_unit"),
            "discount": obj.get("discount"),
            "dangerous_goods_details": obj.get("dangerous_goods_details")
        })
        return _obj


