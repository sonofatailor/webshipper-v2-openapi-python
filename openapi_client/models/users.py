# coding: utf-8

"""
    Webshipper V2 REST API

       <p>     The Webshipper API is a RESTful JSON API that gives full control over your Webshipper account. The API is scoped to your <em>account name</em>,     and is accessed via the endpoint <em>https://&lt;account name&gt;.api.webshipper.io/v2/</em>. Your <em>account name</em> is the same as you see when you access the Webshipper web UI     at <em>https://&lt;account name&gt;.webshipper.io</em>.   </p>    <p>     This API conforms to the <a href=\"http://jsonapi.org/\">JSON API standard</a> with the following conventions:     <ul>       <li>Resources are identified with the attribute <code>id</code>, which is a server-side generated sequential integer</li>       <li>Resource types are pluralised and underscored, like <code>order_lines</code></li>       <li>The API has a fixed page limit of 30 records. To fetch more records use the query parameter <code>page[number]</code></li>       <li>All resources have the attributes <code>created_at</code> and <code>updated_at</code> which are ISO 8601 timestamps like <code>2018-03-07T14:01:18.000Z</code> </li>       <li>All country codes are <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2</a> codes</li>     </ul>   </p>     <p> It is also possible to download the documentation in the OpenAPI 3.0 <a href=\"?download_openapi=1\">here</a> </p>    <div class=\"alert alert-info\">     <i class=\"fa fa-info mr-2\"></i>     Webshipper <em>strongly</em> recommends using a client library for utilising this API. Refer to jsonapi.org's list of     <a href=\"http://jsonapi.org/implementations/#client-libraries\">jsonapi.org's list of client libraries</a> to find one for your language.   </div> 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Users(BaseModel):
    """
    Users
    """ # noqa: E501
    first_name: Optional[StrictStr] = Field(default=None, description="The user's first name.")
    last_name: Optional[StrictStr] = Field(default=None, description="The user's last name.")
    email: Optional[StrictStr] = Field(default=None, description="The user's e-mail address.")
    password: Optional[StrictInt] = Field(default=None, description="The user's password. This can only be used for changing the password.")
    updated_at: Optional[StrictStr] = Field(default=None, description="The time when resource was last updated or when it was created if it was never updated")
    created_at: Optional[StrictStr] = Field(default=None, description="The time when the resource was created")
    last_sign_in_at: Optional[StrictStr] = Field(default=None, description="The time of the most recent sign-in by the user.")
    all_order_channels: Optional[StrictBool] = Field(default=None, description="Specifies whether the user has access to all order channels on the tenant.")
    all_carriers: Optional[StrictBool] = Field(default=None, description="Specifies whether the user has access to all of the carriers for tenant.")
    hidden: Optional[StrictBool] = Field(default=None, description="Specifies whether the user should be hidden in the user interface.")
    current_password: Optional[StrictStr] = Field(default=None, description="This must be set when changing the password of the user.")
    locale: Optional[StrictInt] = Field(default=None, description="Locale enum. <code>da</code> or <code>en</code>")
    locked_until: Optional[StrictStr] = Field(default=None, description="Locked until specified datetime")
    failed_count: Optional[StrictInt] = Field(default=None, description="Amount of failed login attempts since last login")
    is_locked: Optional[StrictStr] = Field(default=None, description="Read only. Will be true when the user is temporarily locked due to too many login attempts")
    user_status: Optional[StrictInt] = None
    home_page: Optional[StrictStr] = Field(default=None, description="The home page set by the user")
    limit_order_search: Optional[StrictStr] = None
    view_ids: Optional[StrictBool] = Field(default=None, description="Allow user to see id's")
    __properties: ClassVar[List[str]] = ["first_name", "last_name", "email", "password", "updated_at", "created_at", "last_sign_in_at", "all_order_channels", "all_carriers", "hidden", "current_password", "locale", "locked_until", "failed_count", "is_locked", "user_status", "home_page", "limit_order_search", "view_ids"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Users from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "updated_at",
                "created_at",
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Users from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "email": obj.get("email"),
            "password": obj.get("password"),
            "updated_at": obj.get("updated_at"),
            "created_at": obj.get("created_at"),
            "last_sign_in_at": obj.get("last_sign_in_at"),
            "all_order_channels": obj.get("all_order_channels"),
            "all_carriers": obj.get("all_carriers"),
            "hidden": obj.get("hidden"),
            "current_password": obj.get("current_password"),
            "locale": obj.get("locale"),
            "locked_until": obj.get("locked_until"),
            "failed_count": obj.get("failed_count"),
            "is_locked": obj.get("is_locked"),
            "user_status": obj.get("user_status"),
            "home_page": obj.get("home_page"),
            "limit_order_search": obj.get("limit_order_search"),
            "view_ids": obj.get("view_ids")
        })
        return _obj


