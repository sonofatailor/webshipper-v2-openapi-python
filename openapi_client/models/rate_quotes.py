# coding: utf-8

"""
    Webshipper V2 REST API

       <p>     The Webshipper API is a RESTful JSON API that gives full control over your Webshipper account. The API is scoped to your <em>account name</em>,     and is accessed via the endpoint <em>https://&lt;account name&gt;.api.webshipper.io/v2/</em>. Your <em>account name</em> is the same as you see when you access the Webshipper web UI     at <em>https://&lt;account name&gt;.webshipper.io</em>.   </p>    <p>     This API conforms to the <a href=\"http://jsonapi.org/\">JSON API standard</a> with the following conventions:     <ul>       <li>Resources are identified with the attribute <code>id</code>, which is a server-side generated sequential integer</li>       <li>Resource types are pluralised and underscored, like <code>order_lines</code></li>       <li>The API has a fixed page limit of 30 records. To fetch more records use the query parameter <code>page[number]</code></li>       <li>All resources have the attributes <code>created_at</code> and <code>updated_at</code> which are ISO 8601 timestamps like <code>2018-03-07T14:01:18.000Z</code> </li>       <li>All country codes are <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2</a> codes</li>     </ul>   </p>     <p> It is also possible to download the documentation in the OpenAPI 3.0 <a href=\"?download_openapi=1\">here</a> </p>    <div class=\"alert alert-info\">     <i class=\"fa fa-info mr-2\"></i>     Webshipper <em>strongly</em> recommends using a client library for utilising this API. Refer to jsonapi.org's list of     <a href=\"http://jsonapi.org/implementations/#client-libraries\">jsonapi.org's list of client libraries</a> to find one for your language.   </div> 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from openapi_client.models.rate_quotes_items import RateQuotesItems
from openapi_client.models.rate_quotes_items1_inner import RateQuotesItems1Inner
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class RateQuotes(BaseModel):
    """
    RateQuotes
    """ # noqa: E501
    quotes: Optional[List[RateQuotesItems]] = Field(default=None, description="Array of quotes")
    success: Optional[StrictStr] = Field(default=None, description="DEPRECATED. The request will return an error response if the quote failed.")
    delivery_address: Optional[Union[str, Any]] = Field(default=None, description="Delivery address for the quote. Flattened resource of 'Shipping Address'")
    price: Optional[StrictInt] = Field(default=None, description="The total price of the items")
    weight: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Weight for the quote.")
    weight_unit: Optional[StrictStr] = Field(default=None, description="The weight unit. Possible values: g, kg, lbs, oz.")
    height: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Height for the quote. The unit must match the unit you are using for shipping rate configurations.")
    length: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Length for the quote. The unit must match the unit you are using for shipping rate configurations.")
    width: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Width for the quote. The unit must match the unit you are using for shipping rate configurations.")
    dimensions_unit: Optional[StrictStr] = Field(default=None, description="Dimensions unit. Possible values: cm, m, in, ft")
    sender_address: Optional[Union[str, Any]] = Field(default=None, description="Delivery address for the quote. Flattened resource of 'Shipping Address'")
    items: Optional[List[RateQuotesItems1Inner]] = Field(default=None, description="Array of items, each item should have fields <code>quantity</code>, <code>sku</code>, <code>description</code>")
    order_channel_id: Optional[StrictInt] = Field(default=None, description="The id of the order channel for which to get shipping rates.")
    currency: Optional[StrictStr] = None
    include_hidden: Optional[StrictBool] = Field(default=None, description="Also include shipping rates which are normally hidden during checkout.")
    is_return: Optional[StrictBool] = Field(default=None, description="Set to true to quote for return rates. If false standard rates are quoted. Default: false.")
    additional_attributes: Optional[StrictStr] = Field(default=None, description="Possibility to add hash of additional attributes for filtering.")
    filter_by_currency: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["quotes", "success", "delivery_address", "price", "weight", "weight_unit", "height", "length", "width", "dimensions_unit", "sender_address", "items", "order_channel_id", "currency", "include_hidden", "is_return", "additional_attributes", "filter_by_currency"]

    @field_validator('weight_unit')
    def weight_unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('g', 'kg', 'lbs', 'oz'):
            raise ValueError("must be one of enum values ('g', 'kg', 'lbs', 'oz')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RateQuotes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "quotes",
                "success",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in quotes (list)
        _items = []
        if self.quotes:
            for _item in self.quotes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['quotes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of RateQuotes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "quotes": [RateQuotesItems.from_dict(_item) for _item in obj.get("quotes")] if obj.get("quotes") is not None else None,
            "success": obj.get("success"),
            "delivery_address": obj.get("delivery_address"),
            "price": obj.get("price"),
            "weight": obj.get("weight"),
            "weight_unit": obj.get("weight_unit"),
            "height": obj.get("height"),
            "length": obj.get("length"),
            "width": obj.get("width"),
            "dimensions_unit": obj.get("dimensions_unit"),
            "sender_address": obj.get("sender_address"),
            "items": [RateQuotesItems1Inner.from_dict(_item) for _item in obj.get("items")] if obj.get("items") is not None else None,
            "order_channel_id": obj.get("order_channel_id"),
            "currency": obj.get("currency"),
            "include_hidden": obj.get("include_hidden"),
            "is_return": obj.get("is_return"),
            "additional_attributes": obj.get("additional_attributes"),
            "filter_by_currency": obj.get("filter_by_currency")
        })
        return _obj


