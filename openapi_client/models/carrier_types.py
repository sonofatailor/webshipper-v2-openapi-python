# coding: utf-8

"""
    Webshipper V2 REST API

       <p>     The Webshipper API is a RESTful JSON API that gives full control over your Webshipper account. The API is scoped to your <em>account name</em>,     and is accessed via the endpoint <em>https://&lt;account name&gt;.api.webshipper.io/v2/</em>. Your <em>account name</em> is the same as you see when you access the Webshipper web UI     at <em>https://&lt;account name&gt;.webshipper.io</em>.   </p>    <p>     This API conforms to the <a href=\"http://jsonapi.org/\">JSON API standard</a> with the following conventions:     <ul>       <li>Resources are identified with the attribute <code>id</code>, which is a server-side generated sequential integer</li>       <li>Resource types are pluralised and underscored, like <code>order_lines</code></li>       <li>The API has a fixed page limit of 30 records. To fetch more records use the query parameter <code>page[number]</code></li>       <li>All resources have the attributes <code>created_at</code> and <code>updated_at</code> which are ISO 8601 timestamps like <code>2018-03-07T14:01:18.000Z</code> </li>       <li>All country codes are <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2</a> codes</li>     </ul>   </p>     <p> It is also possible to download the documentation in the OpenAPI 3.0 <a href=\"?download_openapi=1\">here</a> </p>    <div class=\"alert alert-info\">     <i class=\"fa fa-info mr-2\"></i>     Webshipper <em>strongly</em> recommends using a client library for utilising this API. Refer to jsonapi.org's list of     <a href=\"http://jsonapi.org/implementations/#client-libraries\">jsonapi.org's list of client libraries</a> to find one for your language.   </div> 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CarrierTypes(BaseModel):
    """
    CarrierTypes
    """ # noqa: E501
    fulfillment_logo: Optional[StrictStr] = Field(default=None, description="Logo for the carrier")
    list_logo: Optional[StrictStr] = Field(default=None, description="Logo for the carrier")
    name: Optional[StrictStr] = Field(default=None, description="Name of the carrier")
    carrier_code: Optional[StrictStr] = Field(default=None, description="Code identifying the carrier")
    description: Optional[StrictStr] = Field(default=None, description="Description of the carrier")
    required_details: Optional[StrictStr] = Field(default=None, description="Details required to use the carrier")
    requires_dutiable: Optional[StrictBool] = None
    supports_zpl: Optional[StrictBool] = None
    supports_pickup: Optional[StrictStr] = None
    supports_tracking: Optional[StrictStr] = None
    supports_price_quoting: Optional[StrictBool] = None
    requires_approval: Optional[StrictBool] = None
    supports_documents: Optional[StrictBool] = None
    supports_shipment_updates: Optional[StrictBool] = Field(default=None, description="Boolean indicating wether the carrier supports shipment updates")
    shipment_updates_limit_minutes: Optional[StrictInt] = Field(default=None, description="Number of minutes before shipment time a shipment can be updated")
    barcode_mail: Optional[StrictStr] = None
    supports_price_pdf_upload: Optional[StrictStr] = None
    supports_deletion: Optional[StrictStr] = None
    barcode_customer_notification_mail_template_id: Optional[StrictInt] = None
    colli_type_support: Optional[StrictInt] = Field(default=None, description="Determines whether the carrier supports colli types.Values should be one of the following. null: Not supported, \"carrier_provided\": Values are determined by the carrier, \"webshipper_provided\": Default Webshipper colli types, \"customer_provided\": The customer can input colli types specific to their aggreement with the carrier.")
    beta: Optional[StrictBool] = None
    supports_test_mode: Optional[StrictBool] = None
    show_send_time: Optional[StrictBool] = None
    supports_shadow_bookings: Optional[StrictBool] = None
    rate_quote_validation: Optional[StrictBool] = None
    carrier_group_id: Optional[StrictStr] = None
    require_ftp_configuration_id: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["fulfillment_logo", "list_logo", "name", "carrier_code", "description", "required_details", "requires_dutiable", "supports_zpl", "supports_pickup", "supports_tracking", "supports_price_quoting", "requires_approval", "supports_documents", "supports_shipment_updates", "shipment_updates_limit_minutes", "barcode_mail", "supports_price_pdf_upload", "supports_deletion", "barcode_customer_notification_mail_template_id", "colli_type_support", "beta", "supports_test_mode", "show_send_time", "supports_shadow_bookings", "rate_quote_validation", "carrier_group_id", "require_ftp_configuration_id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CarrierTypes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CarrierTypes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fulfillment_logo": obj.get("fulfillment_logo"),
            "list_logo": obj.get("list_logo"),
            "name": obj.get("name"),
            "carrier_code": obj.get("carrier_code"),
            "description": obj.get("description"),
            "required_details": obj.get("required_details"),
            "requires_dutiable": obj.get("requires_dutiable"),
            "supports_zpl": obj.get("supports_zpl"),
            "supports_pickup": obj.get("supports_pickup"),
            "supports_tracking": obj.get("supports_tracking"),
            "supports_price_quoting": obj.get("supports_price_quoting"),
            "requires_approval": obj.get("requires_approval"),
            "supports_documents": obj.get("supports_documents"),
            "supports_shipment_updates": obj.get("supports_shipment_updates"),
            "shipment_updates_limit_minutes": obj.get("shipment_updates_limit_minutes"),
            "barcode_mail": obj.get("barcode_mail"),
            "supports_price_pdf_upload": obj.get("supports_price_pdf_upload"),
            "supports_deletion": obj.get("supports_deletion"),
            "barcode_customer_notification_mail_template_id": obj.get("barcode_customer_notification_mail_template_id"),
            "colli_type_support": obj.get("colli_type_support"),
            "beta": obj.get("beta"),
            "supports_test_mode": obj.get("supports_test_mode"),
            "show_send_time": obj.get("show_send_time"),
            "supports_shadow_bookings": obj.get("supports_shadow_bookings"),
            "rate_quote_validation": obj.get("rate_quote_validation"),
            "carrier_group_id": obj.get("carrier_group_id"),
            "require_ftp_configuration_id": obj.get("require_ftp_configuration_id")
        })
        return _obj


