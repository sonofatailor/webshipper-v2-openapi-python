# coding: utf-8

"""
    Webshipper V2 REST API

       <p>     The Webshipper API is a RESTful JSON API that gives full control over your Webshipper account. The API is scoped to your <em>account name</em>,     and is accessed via the endpoint <em>https://&lt;account name&gt;.api.webshipper.io/v2/</em>. Your <em>account name</em> is the same as you see when you access the Webshipper web UI     at <em>https://&lt;account name&gt;.webshipper.io</em>.   </p>    <p>     This API conforms to the <a href=\"http://jsonapi.org/\">JSON API standard</a> with the following conventions:     <ul>       <li>Resources are identified with the attribute <code>id</code>, which is a server-side generated sequential integer</li>       <li>Resource types are pluralised and underscored, like <code>order_lines</code></li>       <li>The API has a fixed page limit of 30 records. To fetch more records use the query parameter <code>page[number]</code></li>       <li>All resources have the attributes <code>created_at</code> and <code>updated_at</code> which are ISO 8601 timestamps like <code>2018-03-07T14:01:18.000Z</code> </li>       <li>All country codes are <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2</a> codes</li>     </ul>   </p>     <p> It is also possible to download the documentation in the OpenAPI 3.0 <a href=\"?download_openapi=1\">here</a> </p>    <div class=\"alert alert-info\">     <i class=\"fa fa-info mr-2\"></i>     Webshipper <em>strongly</em> recommends using a client library for utilising this API. Refer to jsonapi.org's list of     <a href=\"http://jsonapi.org/implementations/#client-libraries\">jsonapi.org's list of client libraries</a> to find one for your language.   </div> 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictInt, StrictStr

from typing import Optional

from webshipperv2.models.orders_get200_response import OrdersGet200Response
from webshipperv2.models.orders_id_get200_response import OrdersIdGet200Response
from webshipperv2.models.orders_id_patch_request import OrdersIdPatchRequest
from webshipperv2.models.orders_post_request import OrdersPostRequest

from webshipperv2.api_client import ApiClient
from webshipperv2.api_response import ApiResponse
from webshipperv2.rest import RESTResponseType


class OrderApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def orders_get(
        self,
        filter_id: Annotated[Optional[StrictStr], Field(description="Filter by id")] = None,
        filter_ext_ref: Annotated[Optional[StrictStr], Field(description="Filter by ext_ref")] = None,
        filter_sorting_id: Annotated[Optional[StrictStr], Field(description="Filter by sorting_id")] = None,
        filter_created_at: Annotated[Optional[StrictStr], Field(description="Filter by created_at")] = None,
        filter_updated_at: Annotated[Optional[StrictStr], Field(description="Filter by updated_at")] = None,
        filter_status: Annotated[Optional[StrictStr], Field(description="Filter by status")] = None,
        filter_visible_ref: Annotated[Optional[StrictStr], Field(description="Filter by visible_ref")] = None,
        filter_slip_printed: Annotated[Optional[StrictStr], Field(description="Filter by slip_printed")] = None,
        filter_label_printed: Annotated[Optional[StrictStr], Field(description="Filter by label_printed")] = None,
        filter_lock_state: Annotated[Optional[StrictStr], Field(description="Filter by lock_state")] = None,
        filter_order_channel: Annotated[Optional[StrictStr], Field(description="Filter by order_channel")] = None,
        filter_order_channel_id: Annotated[Optional[StrictStr], Field(description="Filter by order_channel_id")] = None,
        filter_shipping_rate: Annotated[Optional[StrictStr], Field(description="Filter by shipping_rate")] = None,
        filter_shipping_rate_id: Annotated[Optional[StrictStr], Field(description="Filter by shipping_rate_id")] = None,
        filter_carrier: Annotated[Optional[StrictStr], Field(description="Filter by carrier")] = None,
        filter_sku: Annotated[Optional[StrictStr], Field(description="Filter by sku")] = None,
        filter_free_text: Annotated[Optional[StrictStr], Field(description="Filter by free_text")] = None,
        filter_tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        filter_delivery_country_code: Annotated[Optional[StrictStr], Field(description="Filter by delivery_country_code")] = None,
        filter_activity_type: Annotated[Optional[StrictStr], Field(description="Filter by activity_type")] = None,
        filter_order_lines: Annotated[Optional[StrictStr], Field(description="Filter by order_lines")] = None,
        filter_billing_contact: Annotated[Optional[StrictStr], Field(description="Filter by billing_contact")] = None,
        filter_billing_company: Annotated[Optional[StrictStr], Field(description="Filter by billing_company")] = None,
        filter_billing_email: Annotated[Optional[StrictStr], Field(description="Filter by billing_email")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OrdersGet200Response:
        """List all Orders


        :param filter_id: Filter by id
        :type filter_id: str
        :param filter_ext_ref: Filter by ext_ref
        :type filter_ext_ref: str
        :param filter_sorting_id: Filter by sorting_id
        :type filter_sorting_id: str
        :param filter_created_at: Filter by created_at
        :type filter_created_at: str
        :param filter_updated_at: Filter by updated_at
        :type filter_updated_at: str
        :param filter_status: Filter by status
        :type filter_status: str
        :param filter_visible_ref: Filter by visible_ref
        :type filter_visible_ref: str
        :param filter_slip_printed: Filter by slip_printed
        :type filter_slip_printed: str
        :param filter_label_printed: Filter by label_printed
        :type filter_label_printed: str
        :param filter_lock_state: Filter by lock_state
        :type filter_lock_state: str
        :param filter_order_channel: Filter by order_channel
        :type filter_order_channel: str
        :param filter_order_channel_id: Filter by order_channel_id
        :type filter_order_channel_id: str
        :param filter_shipping_rate: Filter by shipping_rate
        :type filter_shipping_rate: str
        :param filter_shipping_rate_id: Filter by shipping_rate_id
        :type filter_shipping_rate_id: str
        :param filter_carrier: Filter by carrier
        :type filter_carrier: str
        :param filter_sku: Filter by sku
        :type filter_sku: str
        :param filter_free_text: Filter by free_text
        :type filter_free_text: str
        :param filter_tag: Filter by tag
        :type filter_tag: str
        :param filter_delivery_country_code: Filter by delivery_country_code
        :type filter_delivery_country_code: str
        :param filter_activity_type: Filter by activity_type
        :type filter_activity_type: str
        :param filter_order_lines: Filter by order_lines
        :type filter_order_lines: str
        :param filter_billing_contact: Filter by billing_contact
        :type filter_billing_contact: str
        :param filter_billing_company: Filter by billing_company
        :type filter_billing_company: str
        :param filter_billing_email: Filter by billing_email
        :type filter_billing_email: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orders_get_serialize(
            filter_id=filter_id,
            filter_ext_ref=filter_ext_ref,
            filter_sorting_id=filter_sorting_id,
            filter_created_at=filter_created_at,
            filter_updated_at=filter_updated_at,
            filter_status=filter_status,
            filter_visible_ref=filter_visible_ref,
            filter_slip_printed=filter_slip_printed,
            filter_label_printed=filter_label_printed,
            filter_lock_state=filter_lock_state,
            filter_order_channel=filter_order_channel,
            filter_order_channel_id=filter_order_channel_id,
            filter_shipping_rate=filter_shipping_rate,
            filter_shipping_rate_id=filter_shipping_rate_id,
            filter_carrier=filter_carrier,
            filter_sku=filter_sku,
            filter_free_text=filter_free_text,
            filter_tag=filter_tag,
            filter_delivery_country_code=filter_delivery_country_code,
            filter_activity_type=filter_activity_type,
            filter_order_lines=filter_order_lines,
            filter_billing_contact=filter_billing_contact,
            filter_billing_company=filter_billing_company,
            filter_billing_email=filter_billing_email,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrdersGet200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def orders_get_with_http_info(
        self,
        filter_id: Annotated[Optional[StrictStr], Field(description="Filter by id")] = None,
        filter_ext_ref: Annotated[Optional[StrictStr], Field(description="Filter by ext_ref")] = None,
        filter_sorting_id: Annotated[Optional[StrictStr], Field(description="Filter by sorting_id")] = None,
        filter_created_at: Annotated[Optional[StrictStr], Field(description="Filter by created_at")] = None,
        filter_updated_at: Annotated[Optional[StrictStr], Field(description="Filter by updated_at")] = None,
        filter_status: Annotated[Optional[StrictStr], Field(description="Filter by status")] = None,
        filter_visible_ref: Annotated[Optional[StrictStr], Field(description="Filter by visible_ref")] = None,
        filter_slip_printed: Annotated[Optional[StrictStr], Field(description="Filter by slip_printed")] = None,
        filter_label_printed: Annotated[Optional[StrictStr], Field(description="Filter by label_printed")] = None,
        filter_lock_state: Annotated[Optional[StrictStr], Field(description="Filter by lock_state")] = None,
        filter_order_channel: Annotated[Optional[StrictStr], Field(description="Filter by order_channel")] = None,
        filter_order_channel_id: Annotated[Optional[StrictStr], Field(description="Filter by order_channel_id")] = None,
        filter_shipping_rate: Annotated[Optional[StrictStr], Field(description="Filter by shipping_rate")] = None,
        filter_shipping_rate_id: Annotated[Optional[StrictStr], Field(description="Filter by shipping_rate_id")] = None,
        filter_carrier: Annotated[Optional[StrictStr], Field(description="Filter by carrier")] = None,
        filter_sku: Annotated[Optional[StrictStr], Field(description="Filter by sku")] = None,
        filter_free_text: Annotated[Optional[StrictStr], Field(description="Filter by free_text")] = None,
        filter_tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        filter_delivery_country_code: Annotated[Optional[StrictStr], Field(description="Filter by delivery_country_code")] = None,
        filter_activity_type: Annotated[Optional[StrictStr], Field(description="Filter by activity_type")] = None,
        filter_order_lines: Annotated[Optional[StrictStr], Field(description="Filter by order_lines")] = None,
        filter_billing_contact: Annotated[Optional[StrictStr], Field(description="Filter by billing_contact")] = None,
        filter_billing_company: Annotated[Optional[StrictStr], Field(description="Filter by billing_company")] = None,
        filter_billing_email: Annotated[Optional[StrictStr], Field(description="Filter by billing_email")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OrdersGet200Response]:
        """List all Orders


        :param filter_id: Filter by id
        :type filter_id: str
        :param filter_ext_ref: Filter by ext_ref
        :type filter_ext_ref: str
        :param filter_sorting_id: Filter by sorting_id
        :type filter_sorting_id: str
        :param filter_created_at: Filter by created_at
        :type filter_created_at: str
        :param filter_updated_at: Filter by updated_at
        :type filter_updated_at: str
        :param filter_status: Filter by status
        :type filter_status: str
        :param filter_visible_ref: Filter by visible_ref
        :type filter_visible_ref: str
        :param filter_slip_printed: Filter by slip_printed
        :type filter_slip_printed: str
        :param filter_label_printed: Filter by label_printed
        :type filter_label_printed: str
        :param filter_lock_state: Filter by lock_state
        :type filter_lock_state: str
        :param filter_order_channel: Filter by order_channel
        :type filter_order_channel: str
        :param filter_order_channel_id: Filter by order_channel_id
        :type filter_order_channel_id: str
        :param filter_shipping_rate: Filter by shipping_rate
        :type filter_shipping_rate: str
        :param filter_shipping_rate_id: Filter by shipping_rate_id
        :type filter_shipping_rate_id: str
        :param filter_carrier: Filter by carrier
        :type filter_carrier: str
        :param filter_sku: Filter by sku
        :type filter_sku: str
        :param filter_free_text: Filter by free_text
        :type filter_free_text: str
        :param filter_tag: Filter by tag
        :type filter_tag: str
        :param filter_delivery_country_code: Filter by delivery_country_code
        :type filter_delivery_country_code: str
        :param filter_activity_type: Filter by activity_type
        :type filter_activity_type: str
        :param filter_order_lines: Filter by order_lines
        :type filter_order_lines: str
        :param filter_billing_contact: Filter by billing_contact
        :type filter_billing_contact: str
        :param filter_billing_company: Filter by billing_company
        :type filter_billing_company: str
        :param filter_billing_email: Filter by billing_email
        :type filter_billing_email: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orders_get_serialize(
            filter_id=filter_id,
            filter_ext_ref=filter_ext_ref,
            filter_sorting_id=filter_sorting_id,
            filter_created_at=filter_created_at,
            filter_updated_at=filter_updated_at,
            filter_status=filter_status,
            filter_visible_ref=filter_visible_ref,
            filter_slip_printed=filter_slip_printed,
            filter_label_printed=filter_label_printed,
            filter_lock_state=filter_lock_state,
            filter_order_channel=filter_order_channel,
            filter_order_channel_id=filter_order_channel_id,
            filter_shipping_rate=filter_shipping_rate,
            filter_shipping_rate_id=filter_shipping_rate_id,
            filter_carrier=filter_carrier,
            filter_sku=filter_sku,
            filter_free_text=filter_free_text,
            filter_tag=filter_tag,
            filter_delivery_country_code=filter_delivery_country_code,
            filter_activity_type=filter_activity_type,
            filter_order_lines=filter_order_lines,
            filter_billing_contact=filter_billing_contact,
            filter_billing_company=filter_billing_company,
            filter_billing_email=filter_billing_email,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrdersGet200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def orders_get_without_preload_content(
        self,
        filter_id: Annotated[Optional[StrictStr], Field(description="Filter by id")] = None,
        filter_ext_ref: Annotated[Optional[StrictStr], Field(description="Filter by ext_ref")] = None,
        filter_sorting_id: Annotated[Optional[StrictStr], Field(description="Filter by sorting_id")] = None,
        filter_created_at: Annotated[Optional[StrictStr], Field(description="Filter by created_at")] = None,
        filter_updated_at: Annotated[Optional[StrictStr], Field(description="Filter by updated_at")] = None,
        filter_status: Annotated[Optional[StrictStr], Field(description="Filter by status")] = None,
        filter_visible_ref: Annotated[Optional[StrictStr], Field(description="Filter by visible_ref")] = None,
        filter_slip_printed: Annotated[Optional[StrictStr], Field(description="Filter by slip_printed")] = None,
        filter_label_printed: Annotated[Optional[StrictStr], Field(description="Filter by label_printed")] = None,
        filter_lock_state: Annotated[Optional[StrictStr], Field(description="Filter by lock_state")] = None,
        filter_order_channel: Annotated[Optional[StrictStr], Field(description="Filter by order_channel")] = None,
        filter_order_channel_id: Annotated[Optional[StrictStr], Field(description="Filter by order_channel_id")] = None,
        filter_shipping_rate: Annotated[Optional[StrictStr], Field(description="Filter by shipping_rate")] = None,
        filter_shipping_rate_id: Annotated[Optional[StrictStr], Field(description="Filter by shipping_rate_id")] = None,
        filter_carrier: Annotated[Optional[StrictStr], Field(description="Filter by carrier")] = None,
        filter_sku: Annotated[Optional[StrictStr], Field(description="Filter by sku")] = None,
        filter_free_text: Annotated[Optional[StrictStr], Field(description="Filter by free_text")] = None,
        filter_tag: Annotated[Optional[StrictStr], Field(description="Filter by tag")] = None,
        filter_delivery_country_code: Annotated[Optional[StrictStr], Field(description="Filter by delivery_country_code")] = None,
        filter_activity_type: Annotated[Optional[StrictStr], Field(description="Filter by activity_type")] = None,
        filter_order_lines: Annotated[Optional[StrictStr], Field(description="Filter by order_lines")] = None,
        filter_billing_contact: Annotated[Optional[StrictStr], Field(description="Filter by billing_contact")] = None,
        filter_billing_company: Annotated[Optional[StrictStr], Field(description="Filter by billing_company")] = None,
        filter_billing_email: Annotated[Optional[StrictStr], Field(description="Filter by billing_email")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List all Orders


        :param filter_id: Filter by id
        :type filter_id: str
        :param filter_ext_ref: Filter by ext_ref
        :type filter_ext_ref: str
        :param filter_sorting_id: Filter by sorting_id
        :type filter_sorting_id: str
        :param filter_created_at: Filter by created_at
        :type filter_created_at: str
        :param filter_updated_at: Filter by updated_at
        :type filter_updated_at: str
        :param filter_status: Filter by status
        :type filter_status: str
        :param filter_visible_ref: Filter by visible_ref
        :type filter_visible_ref: str
        :param filter_slip_printed: Filter by slip_printed
        :type filter_slip_printed: str
        :param filter_label_printed: Filter by label_printed
        :type filter_label_printed: str
        :param filter_lock_state: Filter by lock_state
        :type filter_lock_state: str
        :param filter_order_channel: Filter by order_channel
        :type filter_order_channel: str
        :param filter_order_channel_id: Filter by order_channel_id
        :type filter_order_channel_id: str
        :param filter_shipping_rate: Filter by shipping_rate
        :type filter_shipping_rate: str
        :param filter_shipping_rate_id: Filter by shipping_rate_id
        :type filter_shipping_rate_id: str
        :param filter_carrier: Filter by carrier
        :type filter_carrier: str
        :param filter_sku: Filter by sku
        :type filter_sku: str
        :param filter_free_text: Filter by free_text
        :type filter_free_text: str
        :param filter_tag: Filter by tag
        :type filter_tag: str
        :param filter_delivery_country_code: Filter by delivery_country_code
        :type filter_delivery_country_code: str
        :param filter_activity_type: Filter by activity_type
        :type filter_activity_type: str
        :param filter_order_lines: Filter by order_lines
        :type filter_order_lines: str
        :param filter_billing_contact: Filter by billing_contact
        :type filter_billing_contact: str
        :param filter_billing_company: Filter by billing_company
        :type filter_billing_company: str
        :param filter_billing_email: Filter by billing_email
        :type filter_billing_email: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orders_get_serialize(
            filter_id=filter_id,
            filter_ext_ref=filter_ext_ref,
            filter_sorting_id=filter_sorting_id,
            filter_created_at=filter_created_at,
            filter_updated_at=filter_updated_at,
            filter_status=filter_status,
            filter_visible_ref=filter_visible_ref,
            filter_slip_printed=filter_slip_printed,
            filter_label_printed=filter_label_printed,
            filter_lock_state=filter_lock_state,
            filter_order_channel=filter_order_channel,
            filter_order_channel_id=filter_order_channel_id,
            filter_shipping_rate=filter_shipping_rate,
            filter_shipping_rate_id=filter_shipping_rate_id,
            filter_carrier=filter_carrier,
            filter_sku=filter_sku,
            filter_free_text=filter_free_text,
            filter_tag=filter_tag,
            filter_delivery_country_code=filter_delivery_country_code,
            filter_activity_type=filter_activity_type,
            filter_order_lines=filter_order_lines,
            filter_billing_contact=filter_billing_contact,
            filter_billing_company=filter_billing_company,
            filter_billing_email=filter_billing_email,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrdersGet200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _orders_get_serialize(
        self,
        filter_id,
        filter_ext_ref,
        filter_sorting_id,
        filter_created_at,
        filter_updated_at,
        filter_status,
        filter_visible_ref,
        filter_slip_printed,
        filter_label_printed,
        filter_lock_state,
        filter_order_channel,
        filter_order_channel_id,
        filter_shipping_rate,
        filter_shipping_rate_id,
        filter_carrier,
        filter_sku,
        filter_free_text,
        filter_tag,
        filter_delivery_country_code,
        filter_activity_type,
        filter_order_lines,
        filter_billing_contact,
        filter_billing_company,
        filter_billing_email,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if filter_id is not None:
            
            _query_params.append(('filter[id]', filter_id))
            
        if filter_ext_ref is not None:
            
            _query_params.append(('filter[ext_ref]', filter_ext_ref))
            
        if filter_sorting_id is not None:
            
            _query_params.append(('filter[sorting_id]', filter_sorting_id))
            
        if filter_created_at is not None:
            
            _query_params.append(('filter[created_at]', filter_created_at))
            
        if filter_updated_at is not None:
            
            _query_params.append(('filter[updated_at]', filter_updated_at))
            
        if filter_status is not None:
            
            _query_params.append(('filter[status]', filter_status))
            
        if filter_visible_ref is not None:
            
            _query_params.append(('filter[visible_ref]', filter_visible_ref))
            
        if filter_slip_printed is not None:
            
            _query_params.append(('filter[slip_printed]', filter_slip_printed))
            
        if filter_label_printed is not None:
            
            _query_params.append(('filter[label_printed]', filter_label_printed))
            
        if filter_lock_state is not None:
            
            _query_params.append(('filter[lock_state]', filter_lock_state))
            
        if filter_order_channel is not None:
            
            _query_params.append(('filter[order_channel]', filter_order_channel))
            
        if filter_order_channel_id is not None:
            
            _query_params.append(('filter[order_channel_id]', filter_order_channel_id))
            
        if filter_shipping_rate is not None:
            
            _query_params.append(('filter[shipping_rate]', filter_shipping_rate))
            
        if filter_shipping_rate_id is not None:
            
            _query_params.append(('filter[shipping_rate_id]', filter_shipping_rate_id))
            
        if filter_carrier is not None:
            
            _query_params.append(('filter[carrier]', filter_carrier))
            
        if filter_sku is not None:
            
            _query_params.append(('filter[sku]', filter_sku))
            
        if filter_free_text is not None:
            
            _query_params.append(('filter[free_text]', filter_free_text))
            
        if filter_tag is not None:
            
            _query_params.append(('filter[tag]', filter_tag))
            
        if filter_delivery_country_code is not None:
            
            _query_params.append(('filter[delivery_country_code]', filter_delivery_country_code))
            
        if filter_activity_type is not None:
            
            _query_params.append(('filter[activity_type]', filter_activity_type))
            
        if filter_order_lines is not None:
            
            _query_params.append(('filter[order_lines]', filter_order_lines))
            
        if filter_billing_contact is not None:
            
            _query_params.append(('filter[billing_contact]', filter_billing_contact))
            
        if filter_billing_company is not None:
            
            _query_params.append(('filter[billing_company]', filter_billing_company))
            
        if filter_billing_email is not None:
            
            _query_params.append(('filter[billing_email]', filter_billing_email))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/vnd.api+json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/orders',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def orders_id_delete(
        self,
        id: StrictInt,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OrdersIdGet200Response:
        """Delete a Order


        :param id: (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orders_id_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrdersIdGet200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def orders_id_delete_with_http_info(
        self,
        id: StrictInt,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OrdersIdGet200Response]:
        """Delete a Order


        :param id: (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orders_id_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrdersIdGet200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def orders_id_delete_without_preload_content(
        self,
        id: StrictInt,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete a Order


        :param id: (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orders_id_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrdersIdGet200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _orders_id_delete_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/vnd.api+json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/orders/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def orders_id_get(
        self,
        id: StrictInt,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OrdersIdGet200Response:
        """Show a single Order


        :param id: (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orders_id_get_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrdersIdGet200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def orders_id_get_with_http_info(
        self,
        id: StrictInt,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OrdersIdGet200Response]:
        """Show a single Order


        :param id: (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orders_id_get_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrdersIdGet200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def orders_id_get_without_preload_content(
        self,
        id: StrictInt,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show a single Order


        :param id: (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orders_id_get_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrdersIdGet200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _orders_id_get_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/vnd.api+json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/orders/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def orders_id_patch(
        self,
        id: StrictInt,
        orders_id_patch_request: OrdersIdPatchRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OrdersIdGet200Response:
        """Update a Order


        :param id: (required)
        :type id: int
        :param orders_id_patch_request: (required)
        :type orders_id_patch_request: OrdersIdPatchRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orders_id_patch_serialize(
            id=id,
            orders_id_patch_request=orders_id_patch_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrdersIdGet200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def orders_id_patch_with_http_info(
        self,
        id: StrictInt,
        orders_id_patch_request: OrdersIdPatchRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OrdersIdGet200Response]:
        """Update a Order


        :param id: (required)
        :type id: int
        :param orders_id_patch_request: (required)
        :type orders_id_patch_request: OrdersIdPatchRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orders_id_patch_serialize(
            id=id,
            orders_id_patch_request=orders_id_patch_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrdersIdGet200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def orders_id_patch_without_preload_content(
        self,
        id: StrictInt,
        orders_id_patch_request: OrdersIdPatchRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a Order


        :param id: (required)
        :type id: int
        :param orders_id_patch_request: (required)
        :type orders_id_patch_request: OrdersIdPatchRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orders_id_patch_serialize(
            id=id,
            orders_id_patch_request=orders_id_patch_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrdersIdGet200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _orders_id_patch_serialize(
        self,
        id,
        orders_id_patch_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if orders_id_patch_request is not None:
            _body_params = orders_id_patch_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/vnd.api+json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/vnd.api+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/orders/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def orders_post(
        self,
        orders_post_request: OrdersPostRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OrdersIdGet200Response:
        """Create a Order


        :param orders_post_request: (required)
        :type orders_post_request: OrdersPostRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orders_post_serialize(
            orders_post_request=orders_post_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "OrdersIdGet200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def orders_post_with_http_info(
        self,
        orders_post_request: OrdersPostRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OrdersIdGet200Response]:
        """Create a Order


        :param orders_post_request: (required)
        :type orders_post_request: OrdersPostRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orders_post_serialize(
            orders_post_request=orders_post_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "OrdersIdGet200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def orders_post_without_preload_content(
        self,
        orders_post_request: OrdersPostRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a Order


        :param orders_post_request: (required)
        :type orders_post_request: OrdersPostRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orders_post_serialize(
            orders_post_request=orders_post_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "OrdersIdGet200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _orders_post_serialize(
        self,
        orders_post_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if orders_post_request is not None:
            _body_params = orders_post_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/vnd.api+json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/vnd.api+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/orders',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


