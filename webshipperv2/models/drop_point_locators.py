# coding: utf-8

"""
    Webshipper V2 REST API

       <p>     The Webshipper API is a RESTful JSON API that gives full control over your Webshipper account. The API is scoped to your <em>account name</em>,     and is accessed via the endpoint <em>https://&lt;account name&gt;.api.webshipper.io/v2/</em>. Your <em>account name</em> is the same as you see when you access the Webshipper web UI     at <em>https://&lt;account name&gt;.webshipper.io</em>.   </p>    <p>     This API conforms to the <a href=\"http://jsonapi.org/\">JSON API standard</a> with the following conventions:     <ul>       <li>Resources are identified with the attribute <code>id</code>, which is a server-side generated sequential integer</li>       <li>Resource types are pluralised and underscored, like <code>order_lines</code></li>       <li>The API has a fixed page limit of 30 records. To fetch more records use the query parameter <code>page[number]</code></li>       <li>All resources have the attributes <code>created_at</code> and <code>updated_at</code> which are ISO 8601 timestamps like <code>2018-03-07T14:01:18.000Z</code> </li>       <li>All country codes are <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2</a> codes</li>     </ul>   </p>     <p> It is also possible to download the documentation in the OpenAPI 3.0 <a href=\"?download_openapi=1\">here</a> </p>    <div class=\"alert alert-info\">     <i class=\"fa fa-info mr-2\"></i>     Webshipper <em>strongly</em> recommends using a client library for utilising this API. Refer to jsonapi.org's list of     <a href=\"http://jsonapi.org/implementations/#client-libraries\">jsonapi.org's list of client libraries</a> to find one for your language.   </div> 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from webshipperv2.models.drop_points import DropPoints
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DropPointLocators(BaseModel):
    """
    DropPointLocators
    """ # noqa: E501
    carrier_id: Optional[StrictInt] = Field(default=None, description="ID of the carrier that you want to quote. <strong>This is only mandatory if no shipping_rate_id is given</strong>.")
    service_code: Optional[StrictStr] = Field(default=None, description="Service code for the service that you want to quote. <strong>This is only mandatory if no shipping_rate_id is given.</strong>")
    shipping_rate_id: Optional[StrictStr] = Field(default=None, description="ID of the shipping rate that you want to quote. <strong>This is only mandatory if no carrier_id is given.</strong>.")
    drop_point_id: Optional[StrictStr] = None
    delivery_address: Optional[StrictStr] = Field(default=None, description="Flattened shipping address object. <code>zip</code> and <code>country_code</code>  are required and <code>address_1</code> is optional.")
    drop_points: Optional[List[DropPoints]] = Field(default=None, description="Array of drop points near delivery_address. This will be populated in the response.")
    __properties: ClassVar[List[str]] = ["carrier_id", "service_code", "shipping_rate_id", "drop_point_id", "delivery_address", "drop_points"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DropPointLocators from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in drop_points (list)
        _items = []
        if self.drop_points:
            for _item in self.drop_points:
                if _item:
                    _items.append(_item.to_dict())
            _dict['drop_points'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DropPointLocators from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "carrier_id": obj.get("carrier_id"),
            "service_code": obj.get("service_code"),
            "shipping_rate_id": obj.get("shipping_rate_id"),
            "drop_point_id": obj.get("drop_point_id"),
            "delivery_address": obj.get("delivery_address"),
            "drop_points": [DropPoints.from_dict(_item) for _item in obj.get("drop_points")] if obj.get("drop_points") is not None else None
        })
        return _obj


