# coding: utf-8

"""
    Webshipper V2 REST API

       <p>     The Webshipper API is a RESTful JSON API that gives full control over your Webshipper account. The API is scoped to your <em>account name</em>,     and is accessed via the endpoint <em>https://&lt;account name&gt;.api.webshipper.io/v2/</em>. Your <em>account name</em> is the same as you see when you access the Webshipper web UI     at <em>https://&lt;account name&gt;.webshipper.io</em>.   </p>    <p>     This API conforms to the <a href=\"http://jsonapi.org/\">JSON API standard</a> with the following conventions:     <ul>       <li>Resources are identified with the attribute <code>id</code>, which is a server-side generated sequential integer</li>       <li>Resource types are pluralised and underscored, like <code>order_lines</code></li>       <li>The API has a fixed page limit of 30 records. To fetch more records use the query parameter <code>page[number]</code></li>       <li>All resources have the attributes <code>created_at</code> and <code>updated_at</code> which are ISO 8601 timestamps like <code>2018-03-07T14:01:18.000Z</code> </li>       <li>All country codes are <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2</a> codes</li>     </ul>   </p>     <p> It is also possible to download the documentation in the OpenAPI 3.0 <a href=\"?download_openapi=1\">here</a> </p>    <div class=\"alert alert-info\">     <i class=\"fa fa-info mr-2\"></i>     Webshipper <em>strongly</em> recommends using a client library for utilising this API. Refer to jsonapi.org's list of     <a href=\"http://jsonapi.org/implementations/#client-libraries\">jsonapi.org's list of client libraries</a> to find one for your language.   </div> 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ServiceQuotes(BaseModel):
    """
    ServiceQuotes
    """ # noqa: E501
    success: Optional[StrictBool] = Field(default=None, description="True if quote was successful")
    carrier_id: Optional[StrictInt] = Field(default=None, description="The id of the carrier to quote")
    service_code: Optional[StrictStr] = Field(default=None, description="Service code of the carrier. This is optional. When omitted, all supported services will be returned.")
    send_time: Optional[StrictStr] = Field(default=None, description="ISO 8601 formatted")
    send_date: Optional[StrictStr] = None
    packages: Optional[List[StrictStr]] = Field(default=None, description="Array of objects, each containing key <code>weight</code>. At least one package is required.")
    delivery_address: Optional[Union[str, Any]] = Field(default=None, description="Delivery address for the quote")
    sender_address: Optional[Union[str, Any]] = Field(default=None, description="Sender address for the quote")
    services: Optional[List[StrictStr]] = Field(default=None, description="Read only. Populated in response with an array of objects containing the following keys: <ul class='list-doc'>  <li><code>service_name</code></li>  <li><code>service_code</code></li>  <li><code>is_return</code></li>    <li><code>supports_paperless</code></li>    <li><code>requires_drop_point</code></li>    <li><code>cost_price</code></li>    <li><code>currency</code></li>    <li><code>vat_percent</code></li>    <li><code>estimated_delivery_date_from</code></li>    <li><code>estimated_delivery_date_to</code></li>    <li>    <code>add_ons</code> <div class='text-muted'>Array containing objects</div>   <ul class='list-doc'>     <li><code>add_on_name</code></li>     <li><code>add_on_code</code></li>   </ul> </li>    <li><code>parameters</code></li> <div class='text-muted'>Array containing objects</div>    <ul class='list-doc'>     <li><code>attr_name</code></li>     <li><code>attr_key</code></li>     <li><code>attr_type</code></li>    </ul>    <li><code>country_combinations</code></li>    <li><code>barcode_requirement</code></li>    <li><code>waybill_requirement</code></li>    <li><code>booking_quote_info</code></li>    <li><code>supported_colli_types</code></li>  </ul>")
    add_ons: Optional[StrictStr] = Field(default=None, description="Carrier add-ons for the quote")
    service_attributes: Optional[StrictStr] = Field(default=None, description="Service attributes for the carrier")
    is_return: Optional[StrictStr] = Field(default=None, description="Determines if you are quoting for return (inbound) services or standard (outbound) services.")
    dutiable: Optional[StrictStr] = Field(default=None, description="Determines if the goods for the quote are dutiable")
    cost_sheet_id: Optional[StrictStr] = Field(default=None, description="Used if you want only a price from a specific cost sheet")
    timeout: Optional[StrictStr] = Field(default=None, description="Timeout for request in seconds. Will default to 15 seconds")
    __properties: ClassVar[List[str]] = ["success", "carrier_id", "service_code", "send_time", "send_date", "packages", "delivery_address", "sender_address", "services", "add_ons", "service_attributes", "is_return", "dutiable", "cost_sheet_id", "timeout"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ServiceQuotes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "success",
                "services",
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ServiceQuotes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "success": obj.get("success"),
            "carrier_id": obj.get("carrier_id"),
            "service_code": obj.get("service_code"),
            "send_time": obj.get("send_time"),
            "send_date": obj.get("send_date"),
            "packages": obj.get("packages"),
            "delivery_address": obj.get("delivery_address"),
            "sender_address": obj.get("sender_address"),
            "services": obj.get("services"),
            "add_ons": obj.get("add_ons"),
            "service_attributes": obj.get("service_attributes"),
            "is_return": obj.get("is_return"),
            "dutiable": obj.get("dutiable"),
            "cost_sheet_id": obj.get("cost_sheet_id"),
            "timeout": obj.get("timeout")
        })
        return _obj


