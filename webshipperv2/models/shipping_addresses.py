# coding: utf-8

"""
    Webshipper V2 REST API

       <p>     The Webshipper API is a RESTful JSON API that gives full control over your Webshipper account. The API is scoped to your <em>account name</em>,     and is accessed via the endpoint <em>https://&lt;account name&gt;.api.webshipper.io/v2/</em>. Your <em>account name</em> is the same as you see when you access the Webshipper web UI     at <em>https://&lt;account name&gt;.webshipper.io</em>.   </p>    <p>     This API conforms to the <a href=\"http://jsonapi.org/\">JSON API standard</a> with the following conventions:     <ul>       <li>Resources are identified with the attribute <code>id</code>, which is a server-side generated sequential integer</li>       <li>Resource types are pluralised and underscored, like <code>order_lines</code></li>       <li>The API has a fixed page limit of 30 records. To fetch more records use the query parameter <code>page[number]</code></li>       <li>All resources have the attributes <code>created_at</code> and <code>updated_at</code> which are ISO 8601 timestamps like <code>2018-03-07T14:01:18.000Z</code> </li>       <li>All country codes are <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2</a> codes</li>     </ul>   </p>     <p> It is also possible to download the documentation in the OpenAPI 3.0 <a href=\"?download_openapi=1\">here</a> </p>    <div class=\"alert alert-info\">     <i class=\"fa fa-info mr-2\"></i>     Webshipper <em>strongly</em> recommends using a client library for utilising this API. Refer to jsonapi.org's list of     <a href=\"http://jsonapi.org/implementations/#client-libraries\">jsonapi.org's list of client libraries</a> to find one for your language.   </div> 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ShippingAddresses(BaseModel):
    """
    ShippingAddresses
    """ # noqa: E501
    att_contact: Optional[StrictStr] = Field(default=None, description="Att person. To generate parcels either att_contact <strong>or</strong> company_name is required")
    company_name: Optional[StrictStr] = Field(default=None, description="Company name. To generate parcels either att_contact <strong>or</strong> company_name is required")
    address_1: Optional[StrictStr] = Field(default=None, description="Address line 1")
    address_2: Optional[StrictStr] = Field(default=None, description="Address line 2")
    country_code: Optional[StrictStr] = Field(default=None, description="ISO 3166-1 alpha-2 code")
    state: Optional[StrictStr] = Field(default=None, description="Sub-division of country, if applicable. State code. ISO 3166-2 alpha-2")
    phone: Optional[StrictStr] = Field(default=None, description="Phone number of the entity. This can be used for SMS notifications.")
    email: Optional[StrictStr] = Field(default=None, description="E-mail address of the entity. This can be used for e-mail notifications.")
    zip: Optional[StrictStr] = Field(default=None, description="Postal code of the entity. This is required for most destination countries.")
    city: Optional[StrictStr] = Field(default=None, description="City of the entity. This is required for most destination countries.")
    vat_no: Optional[StrictStr] = Field(default=None, description="The VAT number of the entity. This is only required for address_type <code>sold_from</code>")
    address_type: Optional[StrictStr] = Field(default=None, description="Used for special addresses for order channels. This will be one of the following: <code>recipient</code>, <code>sender</code>, <code>sold_from</code>, <code>pickup</code>, <code>return</code>, <code>order_address</code>")
    ext_location: Optional[StrictStr] = None
    voec: Optional[StrictStr] = None
    eori: Optional[StrictStr] = None
    sprn: Optional[StrictStr] = None
    ioss: Optional[StrictStr] = None
    fda: Optional[StrictStr] = None
    duns: Optional[StrictStr] = None
    personal_customs_no: Optional[StrictStr] = None
    company_customs_numbers: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["att_contact", "company_name", "address_1", "address_2", "country_code", "state", "phone", "email", "zip", "city", "vat_no", "address_type", "ext_location", "voec", "eori", "sprn", "ioss", "fda", "duns", "personal_customs_no", "company_customs_numbers"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ShippingAddresses from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ShippingAddresses from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "att_contact": obj.get("att_contact"),
            "company_name": obj.get("company_name"),
            "address_1": obj.get("address_1"),
            "address_2": obj.get("address_2"),
            "country_code": obj.get("country_code"),
            "state": obj.get("state"),
            "phone": obj.get("phone"),
            "email": obj.get("email"),
            "zip": obj.get("zip"),
            "city": obj.get("city"),
            "vat_no": obj.get("vat_no"),
            "address_type": obj.get("address_type"),
            "ext_location": obj.get("ext_location"),
            "voec": obj.get("voec"),
            "eori": obj.get("eori"),
            "sprn": obj.get("sprn"),
            "ioss": obj.get("ioss"),
            "fda": obj.get("fda"),
            "duns": obj.get("duns"),
            "personal_customs_no": obj.get("personal_customs_no"),
            "company_customs_numbers": obj.get("company_customs_numbers")
        })
        return _obj


